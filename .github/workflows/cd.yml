name: Publish

on:
  push:
    tags:
      - "v*"
  release:
    types:
      - released

jobs:
  binary:
    name: Publish ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      advice.detachedHead: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: armv7-linux-androideabi
          - os: ubuntu-latest
            target: aarch64-linux-android
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
    steps:
      - uses: hecrj/setup-rust-action@v1.3.4
        with:
          rust-version: stable
      - uses: actions/checkout@v1

      - name: Echo the version (test)
        id: echo_version
        run: echo ${{ github.ref }}

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ github.ref }} > /dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Quit early if no version found
        id: quit_early_if_no_version
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: |
          gh run cancel ${{ github.run_id }}
          gh run watch ${{ github.run_id }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install target
        id: installtarget
        run: rustup target add ${{ matrix.target }}

      - name: Build
        id: build
        run: scripts/dot rust release ${{ matrix.target }}

      - name: Create a release if not already present
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: gh release create ${{ github.ref }} --title "${{ github.ref }}" --notes "This is a minimal draft release note." --draft
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/tar/navi.${{ steps.build.outputs.EXTENSION }}
          tag: ${{ github.ref }}
          asset_name: navi-${{ github.ref }}-${{ matrix.target }}.${{ steps.build.outputs.EXTENSION }}

    permissions:
      actions: write