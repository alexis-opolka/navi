#!/usr/bin/env bash
set -euo pipefail

### --------------------------------------------------------------------------------------------------------------------
###     Logging functions
### --------------------------------------------------------------------------------------------------------------------

log::info() {
  ### Will print `[INFO]` in black foreground colour and magenta background colour
  ### then will print the given text in a magenta foreground colour and default background colour.
  printf "\033[35m\033[7m[INFO]\033[27;39m \033[35m$*\033[39m\n"
}

log::error() {
  ### Will print `[ERROR]` in black foreground colour and red background colour
  ### then will print the given text in a red foreground colour and default background colour.
  printf "\033[31m\033[7m[ERROR]\033[27;39m \033[31m$*\033[39m\n"
}

log::warn() {
  ### Will print `[WARNING]` in black foreground colour and yellow background colour
  ### then will print the given text in a yellow foreground colour and default background colour.
  printf "\033[33m\033[7m[WARNING]\033[27;39m \033[33m$*\033[39m\n"
}

### --------------------------------------------------------------------------------------------------------------------
###     Utils functions
### --------------------------------------------------------------------------------------------------------------------

is_windows() {
   local -r target="$1"
   echo "$target" | grep -q "windows"
}

get_env_target() {
   eval "$(rustc --print cfg | grep target)"
   local -rr raw="${target_arch:-}-${target_vendor:-}-${target_os:-}-${target_env:-}"
   log::info "env target raw: $raw"
   if echo "$raw" | grep -q "x86_64-apple-macos"; then
      echo "x86_64-apple-darwin"
   else
      echo "$raw"
   fi
}

_tap() {
   log::info "$@"
   "$@"
}

### --------------------------------------------------------------------------------------------------------------------
###     Release-Related functions
### --------------------------------------------------------------------------------------------------------------------

release() {
   local -r env_target="$(get_env_target)"
   log::info "env target: $env_target"

   local -r cross_target="${1:-"$env_target"}"
   log::info "desired target: $cross_target"

   TAR_DIR="${PROJ_HOME}/target/tar"
   local use_zip=false
   local cross=true

   if [[ "$cross_target" == "$env_target" ]]; then
      cross=false
   fi

   cd "$PROJ_HOME"

   rm -rf "${PROJ_HOME}/target" 2> /dev/null || true

   if $cross; then
      cargo install cross 2> /dev/null || true
      _tap cross build --release --target "$cross_target" # --locked
      local -r bin_folder="${cross_target}/release"
   else
      _tap cargo build --release # --locked
      local -r bin_folder="release"
   fi

   _ls "${bin_folder}"

   if is_windows "$cross_target"; then
      local -r exe_ext=".exe"
      use_zip=true
   else
      local -r exe_ext=""
   fi

   bin_path="${PROJ_HOME}/target/${bin_folder}/${PROJ_BIN_NAME}${exe_ext}"

   chmod +x "$bin_path"
   mkdir -p "$TAR_DIR" 2> /dev/null || true
   cp "$bin_path" "$TAR_DIR"
   cd "$TAR_DIR"

   if $use_zip; then
      zip -r "${PROJ_BIN_NAME}.zip" ./*
      echo "EXTENSION=zip" >> GITHUB_OUTPUT
   else
      tar -czf "${PROJ_BIN_NAME}.tar.gz" ./*
      echo "EXTENSION=tar.gz" >> GITHUB_OUTPUT
   fi

   _ls "${bin_path}"
   _ls "${TAR_DIR}"
}

_ls() {
   log::info "contents from $*:"
   ls -la "$@" || true
}

### --------------------------------------------------------------------------------------------------------------------
###     Main script
### --------------------------------------------------------------------------------------------------------------------

release "$@"